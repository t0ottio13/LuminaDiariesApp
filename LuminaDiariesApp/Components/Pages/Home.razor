@using LuminaDiariesApp.Models
@using LuminaDiariesApp.Interfaces
@page "/"
@rendermode InteractiveServer
@inject IDiaryService diaryService
@inject ILogger<Home> logger
@inject IOpenAIService openAIService

<PageTitle>Diary List</PageTitle>

<FluentCard AreaRestricted="false">
    <FluentInputLabel>Title</FluentInputLabel>
    <FluentTextField Required=true @bind-Value=title style="width: 100%;" />

    <FluentInputLabel>Content</FluentInputLabel>
    <FluentTextArea Required=true @bind-Value=content style="width: 100%;" />

    <FluentInputLabel>Date</FluentInputLabel>
    <FluentDatePicker Required=true @bind-Value=date />

    <FluentInputLabel>Comment</FluentInputLabel>

    @if (string.IsNullOrWhiteSpace(eulogy) || !isGenerating)
    {
        <FluentButton Appearance="Appearance.Outline"
                      AriaLabel="To"
                      OnClick="@RequestComment">
            Generate
        </FluentButton>
    }
    else if (!string.IsNullOrWhiteSpace(eulogy))
    {
        <FluentCard>
            <p>@eulogy</p>
        </FluentCard>
    }
    else
    {
        <div style="width: 300px; display: grid; grid-gap: 12px; grid-auto-flow: column;">
            <FluentProgress Min="0" Max="100" Value="75"></FluentProgress>
            <FluentProgress></FluentProgress>
        </div>
    }

    <div>
        <FluentButton Appearance="Appearance.Accent"
                      AriaLabel="To"
                      OnClick="@AddDiary"
                      Class="mt-3">
            Add
        </FluentButton>
    </div>

</FluentCard>

@foreach (var diary in diariesList)
{
    <FluentCard Class="mt-3">
        <p>@diary.date.ToString("yyyy-MM-dd")</p>
        <p>@diary.title</p>
        <p>@diary.content</p>
    </FluentCard>
}

@code {
    private List<Diary> diariesList = new();
    private long userId = 1;
    private string? title;
    private string? content;
    private string? eulogy;
    private DateTime? date = DateTime.UtcNow;

    private bool isGenerating;

    protected override async Task OnInitializedAsync()
    {
        diariesList = await GetDiaries();
    }

    private async Task<List<Diary>> GetDiaries()
    {
        var diaries = await diaryService.GetDiariesAsync(userId);
        return diaries.ToList();
    }

    private async void AddDiary()
    {
        if (string.IsNullOrWhiteSpace(title) || string.IsNullOrWhiteSpace(content)
        || date is null) return;

        // Add diary to the database
        var item = new Diary(userId, title, content, date.Value);
        try
        {
            await diaryService.AddDiaryAsync(item);
        }
        catch
        {
            logger.LogError("Could not save to database.");
        }

        // Update Diary List
        diariesList = await GetDiaries();

        // Reset input form
        title = string.Empty;
        content = string.Empty;
        date = DateTime.Today;

        return;
    }

    private async void RequestComment()
    {
        isGenerating = true;
        if (string.IsNullOrWhiteSpace(content))
        {
            return;
        }

        var message = await openAIService.GetCommentAsync(content);
        eulogy = message;

        isGenerating = false;
    }
}
